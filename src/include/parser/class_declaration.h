#pragma once

class NodePool;
class ASTNode;
class CrateNode;
class EnumVariantsNode;
class EnumerationNode;
class LiteralExpressionNode;
class ArrayElementsNode;
class ArrayExpressionNode;
class PathInExpressionNode;
class StructExprFieldNode;
class StructExprFieldsNode;
class StructExpressionNode;
class ExpressionWithoutBlockNode;
class BlockExpressionNode;
class InfiniteLoopExpressionNode;
class ConditionsNode;
class PredicateLoopExpressionNode;
class LoopExpressionNode;
class IfExpressionNode;
class ExpressionWithBlockNode;
class CallParamsNode;
class ExpressionNode;
class ShorthandSelfNode;
class SelfParamNode;
class FunctionParamNode;
class FunctionParametersNode;
class FunctionReturnTypeNode;
class FunctionNode;
class ImplementationNode;
class ConstantItemNode;
class AssociatedItemNode;
class ItemNode;
class PathIdentSegmentNode;
class IdentifierPatternNode;
class ReferencePatternNode;
class PatternWithoutRangeNode;
class LetStatementNode;
class ExpressionStatementNode;
class StatementNode;
class StatementsNode;
class StructFieldNode;
class StructFieldsNode;
class StructNode;
class IdentifierNode;
class CharLiteralNode;
class StringLiteralNode;
class RawStringLiteralNode;
class CStringLiteralNode;
class RawCStringLiteralNode;
class IntegerLiteralNode;
class TrueNode;
class FalseNode;
class SelfLowerNode;
class SelfUpperNode;
class UnderscoreExpressionNode;
class ContinueExpressionNode;
class TraitNode;
class ReferenceTypeNode;
class ArrayTypeNode;
class UnitTypeNode;
class TypeNoBoundsNode;

using TypeNode = TypeNoBoundsNode;
using PatternNoTopAltNode = PatternWithoutRangeNode;
using PatternNode = PatternNoTopAltNode;
using PathExpressionNode = PathInExpressionNode;
using PathExprSegmentNode = PathIdentSegmentNode;
using TypePathSegmentNode = PathIdentSegmentNode;
using TypePathNode = TypePathSegmentNode;
using EnumVariantNode = IdentifierNode;
using WildcardPatternNode = UnderscoreExpressionNode;
