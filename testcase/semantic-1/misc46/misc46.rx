/*
Test Package: Semantic-1
Test Target: misc
Author: Wenxin Zheng
Time: 2025-08-08
Verdict: Success
Comment: Ackermann function implementation using pure recursion
*/

// Ackermann function implementation using pure recursion
// One of the fastest-growing recursive functions in computability theory
fn ackermann(m: i32, n: i32) -> i32 {
    if (m == 0) {
        return n + 1;
    } else if (n == 0) {
        return ackermann(m - 1, 1);
    } else {
        return ackermann(m - 1, ackermann(m, n - 1));
    }
}

// Iterative wrapper for safety with small inputs
fn safe_ackermann(m: i32, n: i32) -> i32 {
    let mut counter: i32 = 0;
    while (counter < 5) { // Safety limit for demonstration
        if (counter == 0 && m <= 3 && n <= 3) {
            return ackermann(m, n);
        }
        counter += 1;
    }
    return -1; // Error case
}

fn main() {
    let m: i32 = 2;
    let n: i32 = 3;
    let result: i32 = safe_ackermann(m, n);
    printInt(result);
    exit(0);
}
