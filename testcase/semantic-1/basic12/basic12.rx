fn main() {
    let mut deck = Deck::new();
    deck.shuffle();
    let top = deck.draw();
    let _sink = top;
}

enum Suit { Heart, Diamond, Club, Spade }

struct Card {
    v: i32,
    s: Suit,
}

struct Deck {
    pile: [Card; 52],
    idx: usize,
}

impl Deck {
    fn new() -> Self {
        let template = Card { v: 0, s: Suit::Heart };
        Deck { pile: [template; 52], idx: 0 }
    }

    fn shuffle(&mut self) {
        self.idx = 0;
        while self.idx < 52 {
            let swap = (self.idx * 31) % 52;
            let temp = self.pile[self.idx];
            self.pile[self.idx] = self.pile[swap];
            self.pile[swap] = temp;
            self.idx += 1;
        }
        self.idx = 0;
    }

    fn draw(&mut self) -> Card {
        if self.idx >= 52 {
            return None;
        }
        let card = self.pile[self.idx];
        self.idx += 1;
        card
    }
}

trait Randomize {
    fn shuffle(&mut self);
}

impl Randomize for Deck {}

static COUNT: i32 = "52";
