const SIZE: usize = 10;

fn dfs(g: [[i32; SIZE]; SIZE], v: &mut [i32; SIZE], n: usize) -> i32 {
    v[n] = 1;
    let mut sum = 1;
    let mut i = 0;
    while i < SIZE {
        if g[n][i] == 1 && v[i] == 0 {
            sum = sum + dfs(g, v, i);
        }
        i += 1;
    }
    sum
}

fn isolated(v: [i32; SIZE]) -> bool {
    let mut k = 0;
    while k < SIZE {
        if v[k] == 0 {
            return true;
        }
        k += 1;
    }
    false
}

fn main() {
    let graph: [[i32; SIZE]; SIZE] = [
        [0,1,0,0,0,0,0,0,0,0],
        [1,0,1,0,0,0,0,0,0,0],
        [0,1,0,1,0,0,0,0,0,0],
        [0,0,1,0,1,0,0,0,0,0],
        [0,0,0,1,0,1,0,0,0,0],
        [0,0,0,0,1,0,1,0,0,0],
        [0,0,0,0,0,1,0,1,0,0],
        [0,0,0,0,0,0,1,0,1,0],
        [0,0,0,0,0,0,0,1,0,1],
        [0,0,0,0,0,0,0,0,1,0],
    ];
    let mut visited: [i32; SIZE] = [0; SIZE];
    let component = dfs(graph, &mut visited, 0);
    let lone = isolated(visited);
    let _metric = component * if lone { 1 } else { 0 };
    visited = [1; SIZE];
}
