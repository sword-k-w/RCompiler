type Mat3 = [[i32; 3]; 3];
fn det3(m: &Mat3) -> i32 {
    let a = m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1]);
    let b = m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]);
    let c = m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0]);
    a - b + c
}
fn transpose(src: &Mat3, dst: &mut Mat3) {
    let mut r = 0;
    while r < 3 {
        let mut c = 0;
        while c < 3 {
            dst[r][c] = src[c][r];
            c += 1;
        }
        r += 1;
    }
}
fn main() {
    let m: Mat3 = [[2, 3, 1], [4, 0, 5], [7, 2, 6]];
    let _d = det3(&m);
    let mut t: Mat3 = [[0; 3]; 3];
    transpose(&m, &mut t);
}
